%%{
	var utils = system.getScript("/scripts/utils.js");
	const deviceSelected = utils.deviceSelected;
	const devData = utils.devData;
	const socName = utils.socName;
	const qos = utils.qos;
	
	var uniqueEndPoint = _.uniq(utils.endPoint());
%%}

/*
 * K3 Quality of Service (QoS) Configuration Data
 * Auto generated from K3 Resource Partitioning tool
 */

#define `socName.toUpperCase()`_QOS_COUNT	(sizeof(`socName`_qos_data) / sizeof(`socName`_qos_data[0]))

struct qos_data `socName`_qos_data[] = {
%if (system.modules["/modules/qosConfig"]) {
%	for (let inst of system.modules["/modules/qosConfig"].$instances) {
%		_.each(inst.qosdev,(e) => {
%			var n = inst.deviceName + "_" + e;
%			for (var c = 0; c < inst.chan.length; c++) {
%				var channel = inst.chan[c];
	{
		.reg = `qos[n].baseAddress` + `channel` * 0x4,
		.val = `utils.decimalToHexadecimal(utils.getValue(inst))`
	},
%			}
%		})
%	}
%}

	/* Set the 1:1 mapping for orderID MAP1/MAP2 registers */
%_.each(uniqueEndPoint,(u) => {
%	var group = qos[u].groupCount;
%	for(var g = 0 ; g < group ; g++ ){
	{
		.reg = `qos[u].baseAddress` + `g` * 0x400 + 0x0
		.val = 0x76543210,
	},
	{
		.reg = `qos[u].baseAddress` + `g` * 0x400 + 0x4
		.val = 0xfedcba98,
	},
%	}
%})
};

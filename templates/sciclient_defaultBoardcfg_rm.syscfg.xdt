%%{
	// Set the bits to 10 if a option is selected else to 01

	function setBit(Resource,maxValue){

		// This array contain option that are not selected

		var notSelected = [];
		for( var i = 0 ; i < maxValue ; i++){
			var found = 0;
			for( var j = 0 ; j < Resource.length ; j++){
				if(Resource[j] === i){
					found = 1;
				}
			}
			if(!found){
				notSelected.push(i);
			}
		}
		// set the selected bits to 10

		var val = 0;
		for( var i = 0 ; i < Resource.length ; i++){
			var bit = Resource[i];
			val |= (1 << (2*bit + 1) );
		}

		// set the unselected bits to 01

		for( var i = 0 ; i < notSelected.length ; i++){
			var bit = notSelected[i];
			val |= (1 << (2*bit) );
		}
		return val;
	}

	function decimalToBinary(val){
		return "0b"+val.toString(2);
	}

	function decimalToHexadecimal(val){
		return "0x"+val.toString(16).toUpperCase();
	}

	function unsignedToBinary(Resource){
		var notSelected = [];
		var maxValue = 16;
		for( var i = 0 ; i < maxValue ; i++){
			var found = 0;
			for( var j = 0 ; j < Resource.length ; j++){
				if(Resource[j] === i){
					found = 1;
				}
			}
			if(!found){
				notSelected.push(i);
			}
		}
		var val = [];
		for( var i = 0 ; i < Resource.length ; i++){
			var bit = Resource[i];
			val [ (2*bit + 1) ] = 1;
		}
		for( var i = 0 ; i < notSelected.length ; i++){
			var bit = notSelected[i];
			val [ (2*bit) ] = 1;
		}
		var str = "";
		for( var i = 31 ; i >= 0 ; i--){
			if(val[i])str += "1";
			else str += "0";
		}
		return str;
	}

	function toHexa(val){
		var hex = "";
		for( var i = 7 ; i >= 0 ; i--){
			var str = val[4*i] + val[4*i+1] + val[4*i+2] + val[4*i+3];
			hex += parseInt(str,2).toString(16).toUpperCase();
		}
		return "0x"+hex;
	}

%%}
%%{
  
  const deviceSelected = system.deviceData.device;
  const devData = _.keyBy(system.getScript("/data/SOC.json"),(r) => r.soc);
  const socName = devData[deviceSelected].shortName;
  const {allocateAndSort} = system.getScript("/scripts/allocation.js");
  const resources = _.keyBy(system.getScript("/data/" + socName + "/Resources.json"), (r) => r.utype);
  
  function removePrefix(str){
      var pieces = _.split(str,"_");
      pieces.shift();
      return _.join(pieces,"_");
  }

  function addPrefix(str){
      return devData[deviceSelected].sciClientPrefixReplacement + str;
  }

%%}
/*
 * Copyright (c) 2018-2020, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/**
 *  \file `devData[deviceSelected].sciClientSocVersion`/sciclient_defaultBoardcfg.c
 *
 *  \brief File containing the boardcfg default data structure to
 *      send TISCI_MSG_BOARD_CONFIG message.
 *
 */
/* ========================================================================== */
/*                             Include Files                                  */
/* ========================================================================== */

#include <ti/drv/sciclient/soc/sysfw/include/`devData[deviceSelected].shortName`/tisci_hosts.h>
#include <ti/drv/sciclient/soc/sysfw/include/`devData[deviceSelected].shortName`/tisci_boardcfg_constraints.h>
#include <ti/drv/sciclient/soc/sysfw/include/`devData[deviceSelected].shortName`/tisci_devices.h>
#include <ti/drv/sciclient/soc/`devData[deviceSelected].sciClientSocVersion`/sciclient_defaultBoardcfg.h>

/* ========================================================================== */
/*                            Global Variables                                */
/* ========================================================================== */

#if defined (BUILD_MCU1_0)
const struct tisci_local_rm_boardcfg gBoardConfigLow_rm
__attribute__(( aligned(128), section(".boardcfg_data") )) =
{
    .rm_boardcfg = {
        .rev = {
            .tisci_boardcfg_abi_maj = TISCI_BOARDCFG_RM_ABI_MAJ_VALUE,
            .tisci_boardcfg_abi_min = TISCI_BOARDCFG_RM_ABI_MIN_VALUE,
        },
        .host_cfg = {
            .subhdr = {
                .magic = TISCI_BOARDCFG_RM_HOST_CFG_MAGIC_NUM,
                .size = (uint16_t) sizeof(struct tisci_boardcfg_rm_host_cfg),
            },
            .host_cfg_entries = {
                % if (system.modules["/modules/hostConfig"]) {
				%	for (let inst of system.modules["/modules/hostConfig"].$instances) {
				{
						.allowed_atype = `decimalToBinary(setBit(inst.allowedAtype,3))`,
						.allowed_qos   = `decimalToHexadecimal(setBit(inst.allowedqos,8))`,
						.allowed_orderid = `toHexa(unsignedToBinary(inst.allowedorderid))`,
						.allowed_priority = `decimalToHexadecimal(setBit(inst.allowedpriority,8))`,
						.allowed_sched_priority = `decimalToHexadecimal(setBit(inst.allowedschedpriority,4))`
 				},
				%	}
				% }
                [1] = {
                        .allowed_atype = 0b101010,
                        .allowed_qos   = 0xAAAA,
                        .allowed_orderid = 0xAAAAAAAAU,
                        .allowed_priority = 0xAAAA,
                        .allowed_sched_priority = 0xAA
                    },
            },
        },
        .resasg = {
            .subhdr = {
                .magic = TISCI_BOARDCFG_RM_RESASG_MAGIC_NUM,
                .size = (uint16_t) sizeof(struct tisci_boardcfg_rm_resasg),
            },
            .resasg_entries_size = TISCI_RESASG_UTYPE_CNT * sizeof(struct tisci_boardcfg_rm_resasg_entry),
        },
    },
    .resasg_entries = {
%	var allocation = allocateAndSort(true);
%   _.each(allocation,(all) => {
%	    var utype = all[0].utype;
%	        _.each(all,(entry) => {
		{
			.num_resource = `entry.count`,
			.type = RESASG_UTYPE (`addPrefix(removePrefix(resources[utype].deviceName))`, `addPrefix(resources[utype].subtypeName)`),
            .start_resource = `entry.start`,
			.host_id = `addPrefix(entry.hostName)`,
		},
%	        })
%		})
        {
            .num_resource = 1024,
            .type = TISCI_RESASG_UTYPE(TISCI_DEV_NAVSS0_MODSS_INTAGGR_0, TISCI_RESASG_SUBTYPE_GLOBAL_EVENT_SEVT),
            .start_resource = 20480,
            .host_id = TISCI_HOST_ID_ALL,
        },
    }
};
#endif